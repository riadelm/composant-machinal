export function blockCtx(): {
    /** @type {Set<import('./Block').Block>} */
    '*blocksRegistry': Set<import('./Block').Block>;
    /** @type {import('../blocks/UploadCtxProvider/EventEmitter.js').EventEmitter | null} */
    '*eventEmitter': import('../blocks/UploadCtxProvider/EventEmitter.js').EventEmitter | null;
};
export function activityBlockCtx(fnCtx: import('./Block').Block): {
    '*currentActivity': string;
    '*currentActivityParams': {};
    '*history': never[];
    '*historyBack': null;
    '*closeModal': () => void;
    /** @type {Set<import('./Block').Block>} */
    '*blocksRegistry': Set<import('./Block').Block>;
    /** @type {import('../blocks/UploadCtxProvider/EventEmitter.js').EventEmitter | null} */
    '*eventEmitter': import('../blocks/UploadCtxProvider/EventEmitter.js').EventEmitter | null;
};
export function uploaderBlockCtx(fnCtx: import('./Block').Block): {
    '*commonProgress': number;
    '*uploadList': never[];
    '*focusedEntry': null;
    '*uploadMetadata': null;
    '*uploadQueue': Queue;
    '*uploadCollection': null;
    /** @type {ReturnType<import('../utils/buildOutputError.js').buildCollectionFileError>[]} */
    '*collectionErrors': ReturnType<({ type, message, ...payload }: {
        type: "SOME_FILES_HAS_ERRORS";
        message: string;
    } | ({
        type: "TOO_MANY_FILES";
        message: string;
    } & {
        min: number;
        max: number;
        total: number;
    }) | ({
        type: "TOO_FEW_FILES";
        message: string;
    } & {
        min: number;
        max: number;
        total: number;
    })) => {
        type: import("../types").OutputCollectionErrorType;
        message: string;
    } & Omit<{
        type: "SOME_FILES_HAS_ERRORS";
        message: string;
    } | ({
        type: "TOO_MANY_FILES";
        message: string;
    } & {
        min: number;
        max: number;
        total: number;
    }) | ({
        type: "TOO_FEW_FILES";
        message: string;
    } & {
        min: number;
        max: number;
        total: number;
    }), "type" | "message">>[];
    /** @type {import('../types').OutputCollectionState | null} */
    '*collectionState': import('../types').OutputCollectionState | null;
    /** @type {import('@uploadcare/upload-client').UploadcareGroup | null} */
    '*groupInfo': import('@uploadcare/upload-client').UploadcareGroup | null;
    /** @type {Set<string>} */
    '*uploadTrigger': Set<string>;
    '*currentActivity': string;
    '*currentActivityParams': {};
    '*history': never[];
    '*historyBack': null;
    '*closeModal': () => void;
    /** @type {Set<import('./Block').Block>} */
    '*blocksRegistry': Set<import('./Block').Block>;
    /** @type {import('../blocks/UploadCtxProvider/EventEmitter.js').EventEmitter | null} */
    '*eventEmitter': import('../blocks/UploadCtxProvider/EventEmitter.js').EventEmitter | null;
};
import { Queue } from '@uploadcare/upload-client';
//# sourceMappingURL=CTX.d.ts.map